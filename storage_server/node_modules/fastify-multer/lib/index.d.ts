import { preHandlerHookHandler } from 'fastify';
import diskStorage from 'fastify-multer/lib/storage/disk';
import memoryStorage from 'fastify-multer/lib/storage/memory';
import MulterError from 'fastify-multer/lib/lib/multer-error';
import contentParser from 'fastify-multer/lib/lib/content-parser';
import { Field, Options, FileFilter, StorageEngine } from 'fastify-multer/lib/interfaces';
declare class Multer {
    storage: StorageEngine;
    limits: Options['limits'];
    preservePath: Options['preservePath'];
    fileFilter: FileFilter;
    contentParser: typeof contentParser;
    constructor(options: Options);
    private _makePreHandler;
    single(name: string): preHandlerHookHandler;
    array(name: string, maxCount?: number): preHandlerHookHandler;
    fields(fields: Field[]): preHandlerHookHandler;
    none(): preHandlerHookHandler;
    any(): preHandlerHookHandler;
}
interface MulterFactory {
    (options?: Options | undefined): Multer;
    contentParser: typeof contentParser;
    diskStorage: typeof diskStorage;
    memoryStorage: typeof memoryStorage;
    MulterError: typeof MulterError;
    default: MulterFactory;
}
declare const _default: MulterFactory;
export = _default;
